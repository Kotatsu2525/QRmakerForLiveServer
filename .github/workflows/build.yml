# ワークフローの名前（GitHubのActionsタブで表示される）
name: Rust Build for Windows, macOS, and Linux

# ワークフローが実行されるトリガー（きっかけ）
on:
  # mainブランチにプッシュされた時に実行
  push:
    branches: [ "master" ]
  # Actionsタブから手動で実行できるようにする
  workflow_dispatch:

# 実行される一連の作業（ジョブ）
jobs:
  # "build" という名前のジョブ
  build:
    # 実行するOSを複数指定（マトリックス戦略）
    strategy:
      matrix:
        include:
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            artifact_name: DevQR-Windows-x64
            binary_name: DevQR.exe
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            artifact_name: DevQR-Linux-x64
            binary_name: DevQR
          - os: macos-latest
            target: x86_64-apple-darwin
            artifact_name: DevQR-macOS-x64
            binary_name: DevQR
          - os: macos-latest
            target: aarch64-apple-darwin
            artifact_name: DevQR-macOS-ARM64
            binary_name: DevQR

    # matrixで指定した各OS上で、以下のステップを実行
    runs-on: ${{ matrix.os }}

    steps:
      # ステップ1: リポジトリのコードをチェックアウト（ダウンロード）する
      - uses: actions/checkout@v4

      # ステップ2: Rustツールチェインのセットアップ
      - name: Setup Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: ${{ matrix.target }}
          override: true

      # ステップ3: 指定したターゲット向けにビルドする
      - name: Build
        run: cargo build --release --target ${{ matrix.target }} --verbose

      # ステップ4: 配布用ディレクトリを作成し、実行ファイルとREADMEをコピー
      - name: Prepare distribution package
        run: |
          mkdir -p dist
          cp target/${{ matrix.target }}/release/${{ matrix.binary_name }} dist/
          cp README.md dist/
        shell: bash

      # ステップ5: 完成したパッケージをアーティファクトとしてアップロードする
      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact_name }}-package
          path: dist/
